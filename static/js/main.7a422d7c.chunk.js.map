{"version":3,"sources":["img/gitHubLogo.png","components/Link/Link.js","components/List/List.js","containers/Profile.js","components/Header/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","InnerLink","styled","a","Link","url","title","className","href","target","rel","Title","h2","ListWrapper","ul","ListItem","li","Label","span","List","items","map","item","key","label","value","ProfileWrapper","div","Avatar","img","Profile","state","data","repos","loading","error","fetch","profile","json","profileJSON","repos_url","repositories","repositoriesJSON","this","setState","message","html_url","name","company","location","email","bio","projects","repo","src","avatar_url","alt","Component","AppHeader","AppLogo","Header","logo","GlobalStyle","createGlobalStyle","AppWrapper","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7a422d7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gitHubLogo.da957304.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst InnerLink = styled.a`\n    color: #61dafb;\n`;\n\nconst Link = ({ url, title }) => (\n    <InnerLink\n        className=\"App-link\"\n        href={url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n    >\n        {title}\n    </InnerLink>\n);\n\nexport default Link;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.h2`\npadding: 10px 0;\nborder-bottom: 1px solid lightGrey;\n`;\n\nconst ListWrapper = styled.ul`\nlist-style: none;\npadding: 0;\ntext-align: left;\n`;\n\nconst ListItem = styled.li`\ndisplay: flex;\njustify-content: space-between;\n`;\n\nconst Label = styled.span`\nfont-weight: strong;\n`;\n\nconst List = ({ items, title }) => {\n    return (\n        <>\n        <Title>{title}</Title>\n        <ListWrapper>\n            {items.map(item => (\n                <ListItem key={item.label}>\n                    <Label>{item.label}</Label>{item.value}\n                </ListItem>\n            ))}\n        </ListWrapper>\n        </>\n    );\n}\n\nexport default List;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Link from '../components/Link/Link';\nimport List from '../components/List/List';\n\nconst ProfileWrapper = styled.div`\nwidth: 50%;\nmargin: 10px auto;\n `;\nconst Avatar = styled.img`\nwidth: 150px;\n `;\n\nclass Profile extends Component {\n    state = {\n        data: {},\n        repos: [],\n        loading: true,\n        error: '',\n    }\n\n    async componentDidMount() {\n        try {\n        const profile = await fetch('https://api.github.com/users/WilsonLawler');\n        const profileJSON = await profile.json();\n\n        if (profileJSON) {\n\n            const repositories = await fetch(profileJSON.repos_url);\n            const repositoriesJSON = await repositories.json();\n\n            this.setState({\n                data: profileJSON,\n                repos: repositoriesJSON,\n                loading: false,\n            })\n        }\n    } \n    catch(error) {\n        this.setState({\n            loading: false,\n            error: error.message,\n        });\n    }\n    }\n\n\n    render() {\n        const { data, loading, repos, error } = this.state;\n        const items = [\n            {\n                label: 'html_url', value: <Link url={data.html_url}\n                    title='Github URL' />\n            },\n            { label: 'repos_url', value: data.repos_url },\n            { label: 'name', value: data.name },\n            { label: 'company', value: data.company },\n            { label: 'location', value: data.location },\n            { label: 'email', value: data.email },\n            { label: 'bio', value: data.bio }\n        ];\n        const projects = repos.map(repo => ({\n            label: repo.name,\n            value: <Link url={repo.html_url} title='Github URL' />\n        }));\n        if (loading || error) {\n            return (\n                <div>{ loading ? 'Loading...' : error }</div>\n            )\n        }\n        return (\n            <ProfileWrapper>\n                <Avatar src={data.avatar_url} alt='avatar' />\n                <List title='Profile' items={items} />\n                <List title='Projects' items={projects} />\n            </ProfileWrapper>\n        );\n    }\n}\n\nexport default Profile;","import React from 'react';\nimport styled from 'styled-components';\nimport logo from '../../img/gitHubLogo.png';\n\nconst AppHeader = styled.div`\nheight: 100%;\nbackground-color: #282c34;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nfont-size: calc(10px + 2vmin);\ncolor: white;\n`;\n\nconst AppLogo = styled.img`\nheight: 64px;\npointer-events: none;\n`;\n\nconst Header = () => {\n    return (\n        <AppHeader className=\"App-header\">\n        <AppLogo src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>My Github Portfolio</h1>\n      </AppHeader>\n      );\n}\n \nexport default Header;","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Profile from './Profile';\nimport Header from '../components/Header/Header';\n\nconst GlobalStyle = createGlobalStyle`\nbody {\nmargin: 0;\npadding: 0;\nfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n\"Oxygen\",\n\"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\nsans-serif;\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n}\n`;\n\nconst AppWrapper = styled.div`\ntext-align: center;\n`;\n\nfunction App() {\n  return (\n    <>\n    <GlobalStyle />\n    <AppWrapper >\n      <Header />\n      <Profile />\n    </AppWrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}